"""1. Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора
 класса (метод __init__()),  который должен принимать данные (список списков)
для формирования матрицы. Подсказка: матрица — система некоторых математических
величин, расположенных в виде прямоугольной схемы. Примеры матриц вы найдете
в методичке. Следующий шаг — реализовать перегрузку метода __str__() для вывода
матрицы в привычном виде. Далее реализовать перегрузку метода __add__() для
реализации операции сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица. Подсказка: сложение элементов
матриц выполнять поэлементно — первый элемент первой строки первой матрицы
 складываем с первым элементом первой строки второй матрицы и т.д."""


class Matrix:
    def __init__(self, m_1, m_2):   # создание списка списков
        self.m_1 = m_1
        self.m_2 = m_2

    def __add__(self):
        rez_m = [[0, 0, 0], [0, 0, 0]]  # определение результирующей матрицы
        for i_1 in range(len(self.m_1)):    # цикл по числу строк и элементов
            for i_2 in range(len(self.m_2[i_1])):   # исходных матриц
                rez_m[i_1][i_2] = self.m_1[i_1][i_2] + self.m_2[i_1][i_2]
        return '\n'.join(['\t'.join([str(i_2) for i_2 in i_1]) for i_1 in rez_m])

    def __str__(self):  # честно говоря не понял для чего это надо по заданию, но раз надо
        return '\n'.join(['\t'.join([str(i_2) for i_2 in i_1]) for i_1 in rez_m])


rez_m = Matrix([[20, 7, 21],
                [11, 21, 9]],
               [[8, 10, 32],
                [56, 81, 8]])


print(rez_m.__add__())

